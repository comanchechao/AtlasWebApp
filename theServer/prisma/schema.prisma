generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int      @id @default(autoincrement())
  createdAt            DateTime @default(now())
  username             String   @unique
  email                String   @unique
  name                 String?
  password             String?
  role                 roles    @default(STUDENT)
  CreativityTestResult Int?
  TorrenceTestResult   Int?
  QnA                  String?
  age                  Int?
  status               String?
  phoneNumber          String?
}

enum roles {
  STUDENT
  TEACHER
  ADMIN
}

model Exams {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updateAt    DateTime   @updatedAt
  category_id Int
  title       String
  category    Categories @relation(fields: [category_id], references: [id])
}

model Categories {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  title     String

  Exams Exams[]
}

model Schedules {
  id           Int      @id @default(autoincrement())
  create_at    DateTime @default(now())
  updated_at   DateTime @updatedAt
  title        String
  image_buffer String?
  image_name   String?
}

model Articles {
  id            Int            @id @default(autoincrement())
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  title         String
  authur        String
  first_header  String
  first_body    String
  second_header String?
  second_body   String?
  third_header  String?
  third_body    String?
  date          String?
  category      String?
  ArticleImage  ArticleImage[]
}

model ArticleImage {
  id         Int      @id @default(autoincrement())
  filename   String
  buffer     String
  article_id Int
  article    Articles @relation(fields: [article_id], references: [id])
}

model News {
  id            Int          @id @default(autoincrement())
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  category      String?
  title         String
  authur        String
  first_header  String
  first_body    String
  second_header String?
  second_body   String?
  third_header  String?
  third_body    String?
  date          String?
  NewsImages    NewsImages[]
}

model Books {
  id          Int           @id @default(autoincrement())
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  title       String
  authur      String
  category    String?
  price       String?
  description String
  file        String
  date        String?
  BooksImages BooksImages[]
}

model BooksImages {
  id           Int      @id @default(autoincrement())
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  filename     String
  data         String
  book_id      Int
  books        Books    @relation(fields: [book_id], references: [id])
  audioBooksId Int?
}

model AudioBooks {
  id               Int                @id @default(autoincrement())
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  title            String
  authur           String
  price            String?
  description      String
  date             String?
  file             String
  filename         String
  AudioBooksImages AudioBooksImages[]
}

model AudioBooksImages {
  id           Int        @id @default(autoincrement())
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  filename     String
  data         String
  audioBook_id Int
  AudioBooks   AudioBooks @relation(fields: [audioBook_id], references: [id])
}

model NewsImages {
  id       Int    @id @default(autoincrement())
  filename String
  data     String
  news_id  Int
  news     News   @relation(fields: [news_id], references: [id])
}

model Videos {
  id           Int      @id @default(autoincrement())
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  image_buffer String?
  date         String?
  file         Bytes
  title        String?
  description  String?
  category     String?
}

model VideoFile {
  id   Int     @id @default(autoincrement())
  file String?
}

model Announcements {
  id          Int      @id @default(autoincrement())
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  title       String
  winner      String
  description String?
}

model ImageGallery {
  id            Int             @id @default(autoincrement())
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  title         String
  date          String?
  GalleryImages GalleryImages[]
}

model GalleryImages {
  id           Int          @id @default(autoincrement())
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  file         String
  gallery_id   Int
  filename     String?
  imageGallery ImageGallery @relation(fields: [gallery_id], references: [id])
}

model Files {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  date       String?
  file       String
  title      String
  filename   String?
  group      String
}

model registrations {
  id           Int      @id @default(autoincrement())
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  fullname     String
  phone_number String
  birth_date   String
  category     String
  address      String
  line_number  String
}

model colleages {
  id              Int               @id @default(autoincrement())
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  fullname        String
  father_name     String
  status          String
  personal_id     String
  phone_number    String
  birth_date      String
  category        String
  address         String
  birth_place     String
  colleagesResume colleagesResume[]
}

model colleagesResume {
  id            Int       @id @default(autoincrement())
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  colleage_id   Int
  file          String
  colleage_name String
  Colleage      colleages @relation(fields: [colleage_id], references: [id])
}

model Managements {
  id           Int      @id @default(autoincrement())
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  first_image  String?
  second_image String?
  third_image  String?
}
